{"version":3,"file":"Tview.min.js","sources":["../src/observer/dep.js","../src/util/index.js","../src/observer/array.js","../src/observer/index.js","../src/observer/watcher.js","../src/compile/index.js","../src/vnode/vnode.js","../src/vnode/patch.js","../node_modules/list-diff2/lib/diff.js","../node_modules/list-diff2/index.js","../src/vnode/diff.js","../src/vnode/index.js","../src/instance/state.js","../src/instance/index.js"],"sourcesContent":["/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:55:51\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:06:03\n * @Description: File Content\n */\nexport default class Dep {\n  constructor() {\n    this.subs = []\n  }\n\n  addSub(sub) {\n    this.subs.push(sub)\n  }\n\n  // 删除一个依赖\n  removeSub(sub) {\n    remove(this.subs, sub)\n  }\n\n  // 添加一个依赖\n  depend() {\n    if (window.target) {\n      this.addSub(window.target)\n    }\n  }\n  // 通知所有依赖更新\n  notify() {\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n\n/**\n * Remove an item from an array\n */\nfunction remove(arr, item) {\n  if (arr.length) {\n    const index = arr.indexOf(item)\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:58:02\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-20 18:25:19\n * @Description: File Content\n */\nexport function def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true,\n  })\n}\n\nexport function isObject(obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nexport function hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\nexport function isReserved(str) {\n  const c = (str + '').charCodeAt(0)\n  return c === 0x24 || c === 0x5f\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:55:58\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:16:21\n * @Description: File Content\n */\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\nimport { def } from '../util'\n/**\n * Intercept mutating methods and emit events\n */\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(\n  function (method) {\n    // 缓存源型方法\n    const original = arrayProto[method]\n    def(arrayMethods, method, function mutator() {\n      let i = arguments.length\n      const args = new Array(i)\n      while (i--) {\n        args[i] = arguments[i]\n      }\n      const result = original.apply(this, args)\n      const ob = this.__ob__\n      let inserted\n      switch (method) {\n        case 'push':\n          inserted = args\n          break\n        case 'unshift':\n          inserted = args\n          break\n        case 'splice':\n          inserted = args.slice(2)\n          break\n      }\n      if (inserted) ob.observeArray(inserted)\n      // 通知变化\n      ob.dep.notify()\n      return result\n    })\n  }\n)\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:55:43\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-20 21:39:48\n * @Description: File Content\n */\nimport Dep from './dep'\nimport { arrayMethods } from './array'\nimport { def, isObject, hasOwn } from '../util'\n\nconst hasProto = '__proto__' in {}\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\nexport default class Observer {\n  constructor(value, vm) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, '__ob__', this)\n    this.vm = vm\n\n    if (Array.isArray(value)) {\n      const augment = hasProto ? protoAugment : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  walk(obj) {\n    const keys = Object.keys(obj)\n\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  observeArray(items) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n\nfunction defineReactive(obj, key, val) {\n  // 如果只传了obj和key，那么val = obj[key]\n\n  if (arguments.length === 2) {\n    val = obj[key]\n  }\n\n  if (typeof val === 'object') {\n    new Observer(val)\n  }\n  let childOb = observe(val)\n  const dep = new Dep()\n\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get() {\n      dep.depend()\n\n      if (childOb) {\n        childOb.dep.depend()\n      }\n      return val\n    },\n    set(newVal) {\n      if (val === newVal) {\n        return\n      }\n\n      val = newVal\n      dep.notify()\n    },\n  })\n}\n\nfunction protoAugment(target, src, keys) {\n  target.__proto__ = src\n}\n\nfunction copyAugment(target, src, keys) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n\nexport function observe(value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  let ob\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else {\n    ob = new Observer(value)\n  }\n\n  return ob\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:56:03\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:02:25\n * @Description: File Content\n */\nexport default class Watcher {\n  constructor(vm, expOrFn, cb) {\n    this.vm = vm\n    this.cb = cb\n    this.getter = parsePath(expOrFn)\n    this.value = this.get()\n  }\n\n  get() {\n    window.target = this\n    const vm = this.vm\n    let value = this.getter.call(vm, vm)\n    window.target = undefined\n    return value\n  }\n\n  update() {\n    const oldValue = this.value\n    this.value = this.get()\n    this.cb.call(this.vm, this.value, oldValue)\n  }\n}\n\n/**\n * Parse simple path.\n * 把一个形如'data.a.b.c'的字符串路径所表示的值，从真实的data对象中取出来\n * 例如：\n * data = {a:{b:{c:2}}}\n * parsePath('a.b.c')(data)  // 2\n */\nconst bailRE = /[^\\w.$]/\nfunction parsePath(path) {\n  if (bailRE.test(path)) {\n    return\n  }\n\n  const segments = path.split('.')\n  return function (obj) {\n    for (let i = 0; i < segments.length; i++) {\n      if (!obj) return\n      obj = obj[segments[i]]\n    }\n    return obj\n  }\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:56:16\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-21 18:09:34\n * @Description: File Content\n */\nconst doc = document\nimport Watcher from '../observer/watcher'\n\nexport default class Compile {\n  constructor(el, vm) {\n    // 要遍历的宿主节点\n    this.$el = doc.querySelector(el)\n\n    this.$vm = vm\n\n    // 编译\n    if (this.$el) {\n      // 转换内部内容为片段Fragment\n      this.$fragment = this.node2Fragment(this.$el)\n      // 执行编译\n      this.compile(this.$fragment)\n      // 将编译完的html结果追加至$el\n\n      this.$el.appendChild(this.$fragment)\n    }\n  }\n\n  // 将宿主元素中代码片段拿出来遍历，这样做比较高效\n  node2Fragment(el) {\n    const frag = doc.createDocumentFragment()\n\n    // 将el中所有子元素搬家至frag中\n    let child\n    while ((child = el.firstChild)) {\n      frag.appendChild(child)\n    }\n\n    return frag\n  }\n\n  // 编译过程\n  compile(el) {\n    let childNodes = el.childNodes\n\n    Array.from(childNodes).forEach((node) => {\n      // 类型判断\n      if (this.isElement(node)) {\n        // 元素\n        // console.log('编译元素'+node.nodeName);\n        // 查找t-，@，:\n\n        const nodeAttrs = node.attributes\n\n        Array.from(nodeAttrs).forEach((attr) => {\n          const attrName = attr.name //属性名\n          const exp = attr.value // 属性值\n          if (this.isDirective(attrName)) {\n            // t-text\n            const dir = attrName.substring(2)\n            console.log(node.childNodes)\n\n            // 执行指令\n            this[dir] && this[dir](node, this.$vm, exp)\n          }\n          if (this.isEvent(attrName)) {\n            const dir = attrName.substring(1) // @click\n            this.eventHandler(node, this.$vm, exp, dir)\n          }\n        })\n      } else if (this.isInterpolation(node)) {\n        // 文本\n        // console.log('编译文本'+node.textContent);\n        this.compileText(node)\n      }\n\n      // 递归子节点\n      if (node.childNodes && node.childNodes.length > 0) {\n        this.compile(node)\n      }\n    })\n  }\n\n  compileText(node) {\n    console.log(node, this.$vm, RegExp.$1)\n\n    this.update(node, this.$vm, RegExp.$1, 'text')\n  }\n\n  // 更新函数\n  update(node, vm, exp, dir) {\n    const updaterFn = this[dir + 'Updater']\n    // 初始化\n    updaterFn && updaterFn(node, vm[exp])\n    // console.log(vm, exp)\n\n    // 依赖收集\n    const watcher = new Watcher(vm, exp, function (value) {\n      updaterFn && updaterFn(node, value)\n    })\n    // 存储依赖\n    vm._watchers.push(watcher)\n  }\n\n  text(node, vm, exp) {\n    this.update(node, vm, exp, 'text')\n  }\n\n  //   双绑\n  model(node, vm, exp) {\n    // 指定input的value属性\n    this.update(node, vm, exp, 'model')\n\n    // 视图对模型响应\n    node.addEventListener('input', (e) => {\n      vm[exp] = e.target.value\n    })\n  }\n\n  modelUpdater(node, value) {\n    node.value = value\n  }\n\n  html(node, vm, exp) {\n    this.update(node, vm, exp, 'html')\n  }\n\n  htmlUpdater(node, value) {\n    node.innerHTML = value\n  }\n\n  for(node, vm, exp) {\n    this.update(node, vm, exp, 'for')\n  }\n\n  forUpdater(node, value) {\n    node.textContent = value\n  }\n\n  textUpdater(node, value) {\n    if (Array.isArray(value)) {\n      const arrStr = []\n\n      const arr2str = (val) => {\n        val.forEach((item) => {\n          let str = ''\n          for (const key in item) {\n            if (Array.isArray(item[key])) {\n              arr2str(item[key])\n            } else {\n              str = str + `{${key}：${item[key]}}`\n              arrStr.push(str)\n            }\n          }\n        })\n      }\n\n      arr2str(value)\n\n      node.textContent = '[' + arrStr.join(',') + ']'\n    } else {\n      node.textContent = value\n    }\n  }\n\n  //   事件处理器\n  eventHandler(node, vm, exp, dir) {\n    //   @click=\"onClick\"\n    let fn = vm.$options.methods && vm.$options.methods[exp]\n    if (dir && fn) {\n      node.addEventListener(dir, fn.bind(vm))\n    }\n  }\n\n  isDirective(attr) {\n    return attr.indexOf('t-') == 0\n  }\n\n  isEvent(attr) {\n    return attr.indexOf('@') == 0\n  }\n\n  isElement(node) {\n    return node.nodeType === 1\n  }\n\n  // 插值文本\n  isInterpolation(node) {\n    return node.nodeType === 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent)\n  }\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-15 17:45:46\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-16 11:11:29\n * @Description: File Content\n */\n/**\n * Element virdual-dom 对象定义\n * @param {String} tagName - dom 元素名称\n * @param {Object} props - dom 属性\n * @param {Array<Element|String>} - 子节点\n */\nclass Vnode {\n  constructor(tagName, data, children) {\n    this.tagName = tagName\n    this.data = data\n    this.children = children\n    this.key = data && data.key\n    this.count = this.getCount(children)\n  }\n\n  getCount(children) {\n    let count = 0\n    children.forEach((child, i) => {\n      if (child instanceof Vnode) {\n        count += child.count\n      } else {\n        children[i] = '' + child\n      }\n      count++\n    })\n    return count\n  }\n}\n\n/**\n * render 将virdual-dom 对象渲染为实际 DOM 元素\n */\nVnode.prototype.render = function () {\n  const el = document.createElement(this.tagName)\n  const data = this.data\n  const children = this.children || []\n\n  for (let key in data) {\n    let value = data[key]\n    el.setAttribute(key, value)\n  }\n\n  children.forEach((child) => {\n    let childEl =\n      child instanceof Vnode\n        ? child.render() // 如果子节点也是虚拟DOM，递归构建DOM节点\n        : document.createTextNode(child) // 如果字符串，只构建文本节点\n    el.appendChild(childEl)\n  })\n\n  return el\n}\n\nexport function el(tagName, props, children) {\n  return new Vnode(tagName, props, children)\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-15 19:02:31\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-16 11:44:14\n * @Description: File Content\n */\nconst REPLACE = 0 // 替换原先的节点\nconst REORDER = 1 // 重新排序\nconst PROPS = 2 // 修改了节点的属性\nconst TEXT = 3 // 文本内容改变\n\nfunction patch(node, patches) {\n  var walker = { index: 0 }\n  dfsWalk(node, walker, patches)\n}\n\nfunction dfsWalk(node, walker, patches) {\n  // 从patches拿出当前节点的差异\n  var currentPatches = patches[walker.index]\n\n  var len = node.childNodes ? node.childNodes.length : 0\n  // 深度遍历子节点\n  for (var i = 0; i < len; i++) {\n    var child = node.childNodes[i]\n    walker.index++\n    dfsWalk(child, walker, patches)\n  }\n  // 对当前节点进行DOM操作\n  if (currentPatches) {\n    applyPatches(node, currentPatches)\n  }\n}\n\nfunction applyPatches(node, currentPatches) {\n  currentPatches.forEach((currentPatch) => {\n    switch (currentPatch.type) {\n      case REPLACE:\n        var newNode =\n          typeof currentPatch.node === 'string'\n            ? document.createTextNode(currentPatch.node)\n            : currentPatch.node.render()\n        node.parentNode.replaceChild(newNode, node)\n        break\n      case REORDER:\n        reorderChildren(node, currentPatch.moves)\n        break\n      case PROPS:\n        setProps(node, currentPatch.props)\n        break\n      case TEXT:\n        node.textContent = currentPatch.content\n        break\n      default:\n        throw new Error('Unknown patch type ' + currentPatch.type)\n    }\n  })\n}\n\nfunction setProps(node, props) {\n  for (var key in props) {\n    if (!props[key]) {\n      node.removeAttribute(key)\n    } else {\n      var value = props[key]\n      setAttr(node, key, value)\n    }\n  }\n}\n\nfunction reorderChildren(node, moves) {\n  var staticNodeList = Array.from(node.childNodes)\n  var maps = {}\n\n  staticNodeList.forEach((node) => {\n    // 如果是一个元素节点\n    if (node.nodeType === 1) {\n      var key = node.getAttribute('key')\n      if (key) {\n        maps[key] = node\n      }\n    }\n  })\n\n  moves.forEach((move) => {\n    var index = move.index\n    if (move.type === 0) {\n      // type为 0，表示新的dom对象已经删除该节点\n      if (staticNodeList[index] === node.childNodes[index]) {\n        // maybe have been removed for inserting\n        node.removeChild(node.childNodes[index])\n      }\n      staticNodeList.splice(index, 1)\n    } else if (move.type === 1) {\n      // type为 1，表示新的dom对象插入该节点\n      var insertNode = maps[move.item.key]\n        ? maps[move.item.key].cloneNode(true) // reuse old item\n        : typeof move.item === 'object'\n        ? move.item.render()\n        : document.createTextNode(move.item)\n      staticNodeList.splice(index, 0, insertNode)\n      node.insertBefore(insertNode, node.childNodes[index] || null)\n    }\n  })\n}\n\nfunction setAttr(node, key, value) {\n  switch (key) {\n    case 'style':\n      node.style.cssText = value\n      break\n    case 'value':\n      var tagName = node.tagName || ''\n      tagName = tagName.toLowerCase()\n      if (tagName === 'input' || tagName === 'textarea') {\n        node.value = value\n      } else {\n        // if it is not a input or textarea, use `setAttribute` to set\n        node.setAttribute(key, value)\n      }\n      break\n    default:\n      node.setAttribute(key, value)\n      break\n  }\n}\n\npatch.REPLACE = REPLACE\npatch.REORDER = REORDER\npatch.PROPS = PROPS\npatch.TEXT = TEXT\n\nexport default patch\n","/**\r\n * Diff two list in O(N).\r\n * @param {Array} oldList - Original List\r\n * @param {Array} newList - List After certain insertions, removes, or moves\r\n * @return {Object} - {moves: <Array>}\r\n *                  - moves is a list of actions that telling how to remove and insert\r\n */\r\nfunction diff (oldList, newList, key) {\r\n  var oldMap = makeKeyIndexAndFree(oldList, key)\r\n  var newMap = makeKeyIndexAndFree(newList, key)\r\n\r\n  var newFree = newMap.free\r\n\r\n  var oldKeyIndex = oldMap.keyIndex\r\n  var newKeyIndex = newMap.keyIndex\r\n\r\n  var moves = []\r\n\r\n  // a simulate list to manipulate\r\n  var children = []\r\n  var i = 0\r\n  var item\r\n  var itemKey\r\n  var freeIndex = 0\r\n\r\n  // fist pass to check item in old list: if it's removed or not\r\n  while (i < oldList.length) {\r\n    item = oldList[i]\r\n    itemKey = getItemKey(item, key)\r\n    if (itemKey) {\r\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\r\n        children.push(null)\r\n      } else {\r\n        var newItemIndex = newKeyIndex[itemKey]\r\n        children.push(newList[newItemIndex])\r\n      }\r\n    } else {\r\n      var freeItem = newFree[freeIndex++]\r\n      children.push(freeItem || null)\r\n    }\r\n    i++\r\n  }\r\n\r\n  var simulateList = children.slice(0)\r\n\r\n  // remove items no longer exist\r\n  i = 0\r\n  while (i < simulateList.length) {\r\n    if (simulateList[i] === null) {\r\n      remove(i)\r\n      removeSimulate(i)\r\n    } else {\r\n      i++\r\n    }\r\n  }\r\n\r\n  // i is cursor pointing to a item in new list\r\n  // j is cursor pointing to a item in simulateList\r\n  var j = i = 0\r\n  while (i < newList.length) {\r\n    item = newList[i]\r\n    itemKey = getItemKey(item, key)\r\n\r\n    var simulateItem = simulateList[j]\r\n    var simulateItemKey = getItemKey(simulateItem, key)\r\n\r\n    if (simulateItem) {\r\n      if (itemKey === simulateItemKey) {\r\n        j++\r\n      } else {\r\n        // new item, just inesrt it\r\n        if (!oldKeyIndex.hasOwnProperty(itemKey)) {\r\n          insert(i, item)\r\n        } else {\r\n          // if remove current simulateItem make item in right place\r\n          // then just remove it\r\n          var nextItemKey = getItemKey(simulateList[j + 1], key)\r\n          if (nextItemKey === itemKey) {\r\n            remove(i)\r\n            removeSimulate(j)\r\n            j++ // after removing, current j is right, just jump to next one\r\n          } else {\r\n            // else insert item\r\n            insert(i, item)\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      insert(i, item)\r\n    }\r\n\r\n    i++\r\n  }\r\n\r\n  function remove (index) {\r\n    var move = {index: index, type: 0}\r\n    moves.push(move)\r\n  }\r\n\r\n  function insert (index, item) {\r\n    var move = {index: index, item: item, type: 1}\r\n    moves.push(move)\r\n  }\r\n\r\n  function removeSimulate (index) {\r\n    simulateList.splice(index, 1)\r\n  }\r\n\r\n  return {\r\n    moves: moves,\r\n    children: children\r\n  }\r\n}\r\n\r\n/**\r\n * Convert list to key-item keyIndex object.\r\n * @param {Array} list\r\n * @param {String|Function} key\r\n */\r\nfunction makeKeyIndexAndFree (list, key) {\r\n  var keyIndex = {}\r\n  var free = []\r\n  for (var i = 0, len = list.length; i < len; i++) {\r\n    var item = list[i]\r\n    var itemKey = getItemKey(item, key)\r\n    if (itemKey) {\r\n      keyIndex[itemKey] = i\r\n    } else {\r\n      free.push(item)\r\n    }\r\n  }\r\n  return {\r\n    keyIndex: keyIndex,\r\n    free: free\r\n  }\r\n}\r\n\r\nfunction getItemKey (item, key) {\r\n  if (!item || !key) return void 666\r\n  return typeof key === 'string'\r\n    ? item[key]\r\n    : key(item)\r\n}\r\n\r\nexports.makeKeyIndexAndFree = makeKeyIndexAndFree // exports for test\r\nexports.diff = diff\r\n","module.exports = require('./lib/diff').diff\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-15 18:20:51\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-16 14:04:00\n * @Description: File Content\n */\n// diff 函数，对比两棵树\nimport patch from './patch'\nimport listDiff from 'list-diff2'\n\nexport function diff(oldTree, newTree) {\n  let index = 0 // 当前节点的标志\n  let patches = {} // 用来记录每个节点差异的对象\n  dfsWalk(oldTree, newTree, index, patches)\n  return patches\n}\n\n// 对两棵树进行深度优先遍历\nfunction dfsWalk(oldNode, newNode, index, patches) {\n  var currentPatch = []\n  if (typeof oldNode === 'string' && typeof newNode === 'string') {\n    // 文本内容改变\n    if (newNode !== oldNode) {\n      currentPatch.push({ type: patch.TEXT, content: newNode })\n    }\n  } else if (\n    newNode != null &&\n    oldNode.tagName === newNode.tagName &&\n    oldNode.key === newNode.key\n  ) {\n    // 节点相同，比较属性\n    var propsPatches = diffProps(oldNode, newNode)\n    if (propsPatches) {\n      currentPatch.push({ type: patch.PROPS, props: propsPatches })\n    }\n    // 比较子节点，如果子节点有'ignore'属性，则不需要比较\n    if (!isIgnoreChildren(newNode)) {\n      diffChildren(\n        oldNode.children,\n        newNode.children,\n        index,\n        patches,\n        currentPatch\n      )\n    }\n  } else if (newNode !== null) {\n    // 新节点和旧节点不同，用 replace 替换\n    currentPatch.push({ type: patch.REPLACE, node: newNode })\n  }\n\n  if (currentPatch.length) {\n    patches[index] = currentPatch\n  }\n}\n\n// 遍历子节点\nfunction diffChildren(oldChildren, newChildren, index, patches, currentPatch) {\n  var diffs = listDiff(oldChildren, newChildren, 'key')\n  newChildren = diffs.children\n\n  if (diffs.moves.length) {\n    var reorderPatch = { type: patch.REORDER, moves: diffs.moves }\n    currentPatch.push(reorderPatch)\n  }\n\n  var leftNode = null\n  var currentNodeIndex = index\n  oldChildren.forEach((child, i) => {\n    var newChild = newChildren[i]\n    currentNodeIndex =\n      leftNode && leftNode.count\n        ? currentNodeIndex + leftNode.count + 1\n        : currentNodeIndex + 1\n    dfsWalk(child, newChild, currentNodeIndex, patches)\n    leftNode = child\n  })\n}\n\n// 比较节点属性\nfunction diffProps(oldNode, newNode) {\n  var count = 0\n  var oldProps = oldNode.props\n  var newProps = newNode.props\n  var propsPatches = {}\n  // 查找属性值不同的属性\n  for (var key in oldProps) {\n    if (newProps[key] !== oldProps[key]) {\n      count++\n      propsPatches[key] = newProps[key]\n    }\n  }\n  // 查找新属性\n  for (var key in newProps) {\n    if (!oldProps.hasOwnProperty(key)) {\n      count++\n      propsPatches[key] = newProps[key]\n    }\n  }\n  // 没有属性改变\n  if (count === 0) {\n    return null\n  }\n  return propsPatches\n}\n\nfunction isIgnoreChildren(node) {\n  return node.props && node.props.hasOwnProperty('ignore')\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-12 21:37:47\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-16 11:14:13\n * @Description: File Content\n */\nimport { el } from './vnode'\nimport { diff } from './diff'\nimport patch from './patch'\n\nexport default {\n  el,\n  diff,\n  patch,\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-20 18:17:13\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-20 21:39:37\n * @Description: File Content\n */\nimport { observe } from '../observer/index'\n\nexport function initState(vm) {\n  vm._watchers = []\n  const opts = vm.$options\n\n  // 初始化data\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe((vm._data = {}), true /* asRootData */)\n  }\n}\n\nfunction initData(vm) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function' ? data.call(vm) : data || {}\n\n  // proxy data on instance\n  const keys = Object.keys(data)\n  let i = keys.length\n  while (i--) {\n    proxy(vm, keys[i])\n  }\n  // observe data\n  observe(data, true /* asRootData */)\n}\n\nfunction proxy(vm, key) {\n  Object.defineProperty(vm, key, {\n    configurable: true,\n    enumerable: true,\n    get: function proxyGetter() {\n      return vm._data[key]\n    },\n    set: function proxySetter(val) {\n      vm._data[key] = val\n    },\n  })\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:38:48\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-20 18:28:53\n * @Description: File Content\n */\nimport Observer from '../observer'\nimport Compile from '../compile'\nimport vd from '../vnode/index'\nimport { initState } from './state'\nwindow.vd = vd\n\nclass Tview {\n  constructor(options) {\n    this.$options = options\n\n    // 数据响应化\n    this.$data = options.data\n    initState(this)\n    new Observer(this.$data, this)\n\n    new Compile(options.el, this)\n\n    // created执行\n    if (options.created) {\n      options.created.call(this)\n    }\n  }\n}\n\nexport default Tview\n"],"names":["Dep","subs","sub","push","arr","item","length","index","indexOf","splice","remove","this","window","target","addSub","slice","i","l","update","def","obj","key","val","enumerable","Object","defineProperty","value","writable","configurable","hasOwnProperty","prototype","arrayProto","Array","arrayMethods","create","forEach","method","original","arguments","args","inserted","result","apply","ob","__ob__","observeArray","dep","notify","hasProto","arrayKeys","getOwnPropertyNames","Observer","vm","isArray","protoAugment","copyAugment","walk","keys","defineReactive","items","observe","_typeof","childOb","get","depend","set","newVal","src","__proto__","call","Watcher","expOrFn","cb","getter","path","bailRE","test","segments","split","parsePath","undefined","oldValue","doc","document","Compile","el","$el","querySelector","$vm","$fragment","node2Fragment","compile","appendChild","child","frag","createDocumentFragment","firstChild","childNodes","from","node","_this","isElement","nodeAttrs","attributes","attr","attrName","name","exp","isDirective","dir","substring","console","log","isEvent","eventHandler","isInterpolation","compileText","RegExp","$1","updaterFn","watcher","_watchers","addEventListener","e","innerHTML","textContent","arrStr","arr2str","str","join","fn","$options","methods","bind","nodeType","Vnode","tagName","data","children","count","getCount","render","createElement","setAttribute","childEl","createTextNode","REPLACE","REORDER","PROPS","TEXT","patch","patches","dfsWalk","walker","currentPatches","len","currentPatch","type","newNode","parentNode","replaceChild","moves","staticNodeList","maps","getAttribute","move","removeChild","insertNode","cloneNode","insertBefore","props","setAttr","removeAttribute","setProps","content","Error","style","cssText","toLowerCase","makeKeyIndexAndFree","list","keyIndex","free","itemKey","getItemKey","oldList","newList","oldMap","newMap","newFree","oldKeyIndex","newKeyIndex","freeIndex","newItemIndex","freeItem","simulateList","removeSimulate","j","simulateItem","simulateItemKey","insert","diff","oldNode","propsPatches","oldProps","newProps","diffProps","oldChildren","newChildren","diffs","listDiff","reorderPatch","leftNode","currentNodeIndex","diffChildren","oldTree","newTree","initState","_data","proxy","initData","vd","options","$data","created"],"mappings":"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"}