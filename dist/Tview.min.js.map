{"version":3,"file":"Tview.min.js","sources":["../src/observer/dep.js","../src/util/index.js","../src/observer/array.js","../src/observer/index.js","../src/observer/watcher.js","../src/compile/index.js","../src/index.js"],"sourcesContent":["/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:55:51\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:06:03\n * @Description: File Content\n */\nexport default class Dep {\n  constructor() {\n    this.subs = []\n  }\n\n  addSub(sub) {\n    this.subs.push(sub)\n  }\n\n  // 删除一个依赖\n  removeSub(sub) {\n    remove(this.subs, sub)\n  }\n\n  // 添加一个依赖\n  depend() {\n    if (window.target) {\n      this.addSub(window.target)\n    }\n  }\n  // 通知所有依赖更新\n  notify() {\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n\n/**\n * Remove an item from an array\n */\nfunction remove(arr, item) {\n  if (arr.length) {\n    const index = arr.indexOf(item)\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:58:02\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 09:58:02\n * @Description: File Content\n */\nexport function def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true,\n  })\n}\n\nexport function isObject(obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nexport function hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:55:58\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:16:21\n * @Description: File Content\n */\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\nimport { def } from '../util'\n/**\n * Intercept mutating methods and emit events\n */\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(\n  function (method) {\n    // 缓存源型方法\n    const original = arrayProto[method]\n    def(arrayMethods, method, function mutator() {\n      let i = arguments.length\n      const args = new Array(i)\n      while (i--) {\n        args[i] = arguments[i]\n      }\n      const result = original.apply(this, args)\n      const ob = this.__ob__\n      let inserted\n      switch (method) {\n        case 'push':\n          inserted = args\n          break\n        case 'unshift':\n          inserted = args\n          break\n        case 'splice':\n          inserted = args.slice(2)\n          break\n      }\n      if (inserted) ob.observeArray(inserted)\n      // 通知变化\n      ob.dep.notify()\n      return result\n    })\n  }\n)\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:55:43\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:16:52\n * @Description: File Content\n */\nimport Dep from './dep'\nimport { arrayMethods } from './array'\nimport { def, isObject, hasOwn } from '../util'\n\nconst hasProto = '__proto__' in {}\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\nexport default class Observer {\n  constructor(value, vm) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, '__ob__', this)\n    this.vm = vm\n\n    if (Array.isArray(value)) {\n      const augment = hasProto ? protoAugment : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  walk(obj) {\n    const keys = Object.keys(obj)\n\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n      this.proxyData(keys[i])\n    }\n  }\n\n  observeArray(items) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n\n  proxyData(key) {\n    const { vm } = this\n\n    Object.defineProperty(vm, key, {\n      get() {\n        return vm.$data[key]\n      },\n      set(newVal) {\n        vm.$data[key] = newVal\n      },\n    })\n  }\n}\n\nfunction defineReactive(obj, key, val) {\n  // 如果只传了obj和key，那么val = obj[key]\n\n  if (arguments.length === 2) {\n    val = obj[key]\n  }\n\n  if (typeof val === 'object') {\n    new Observer(val)\n  }\n  let childOb = observe(val)\n  const dep = new Dep()\n\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get() {\n      dep.depend()\n\n      if (childOb) {\n        childOb.dep.depend()\n      }\n      return val\n    },\n    set(newVal) {\n      if (val === newVal) {\n        return\n      }\n\n      val = newVal\n      dep.notify()\n    },\n  })\n}\n\nfunction protoAugment(target, src, keys) {\n  target.__proto__ = src\n}\n\nfunction copyAugment(target, src, keys) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n\nfunction observe(value, asRootData) {\n  console.log(value)\n\n  if (!isObject(value)) {\n    return\n  }\n  let ob\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else {\n    ob = new Observer(value)\n  }\n\n  return ob\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:56:03\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:02:25\n * @Description: File Content\n */\nexport default class Watcher {\n  constructor(vm, expOrFn, cb) {\n    this.vm = vm\n    this.cb = cb\n    this.getter = parsePath(expOrFn)\n    this.value = this.get()\n  }\n\n  get() {\n    window.target = this\n    const vm = this.vm\n    let value = this.getter.call(vm, vm)\n    window.target = undefined\n    return value\n  }\n\n  update() {\n    const oldValue = this.value\n    this.value = this.get()\n    this.cb.call(this.vm, this.value, oldValue)\n  }\n}\n\n/**\n * Parse simple path.\n * 把一个形如'data.a.b.c'的字符串路径所表示的值，从真实的data对象中取出来\n * 例如：\n * data = {a:{b:{c:2}}}\n * parsePath('a.b.c')(data)  // 2\n */\nconst bailRE = /[^\\w.$]/\nfunction parsePath(path) {\n  if (bailRE.test(path)) {\n    return\n  }\n\n  const segments = path.split('.')\n  return function (obj) {\n    for (let i = 0; i < segments.length; i++) {\n      if (!obj) return\n      obj = obj[segments[i]]\n    }\n    return obj\n  }\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:56:16\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:05:40\n * @Description: File Content\n */\nconst doc = document\nimport Watcher from '../observer/watcher'\n\nexport default class Compile {\n  constructor(el, vm) {\n    // 要遍历的宿主节点\n    this.$el = doc.querySelector(el)\n\n    this.$vm = vm\n\n    // 编译\n    if (this.$el) {\n      // 转换内部内容为片段Fragment\n      this.$fragment = this.node2Fragment(this.$el)\n      // 执行编译\n      this.compile(this.$fragment)\n      // 将编译完的html结果追加至$el\n      this.$el.appendChild(this.$fragment)\n    }\n  }\n\n  // 将宿主元素中代码片段拿出来遍历，这样做比较高效\n  node2Fragment(el) {\n    const frag = doc.createDocumentFragment()\n\n    // 将el中所有子元素搬家至frag中\n    let child\n    while ((child = el.firstChild)) {\n      frag.appendChild(child)\n    }\n\n    return frag\n  }\n\n  // 编译过程\n  compile(el) {\n    const childNodes = el.childNodes\n    Array.from(childNodes).forEach((node) => {\n      // 类型判断\n      console.log(node)\n      if (this.isElement(node)) {\n        // 元素\n        // console.log('编译元素'+node.nodeName);\n        // 查找t-，@，:\n        const nodeAttrs = node.attributes\n        Array.from(nodeAttrs).forEach((attr) => {\n          const attrName = attr.name //属性名\n          const exp = attr.value // 属性值\n          if (this.isDirective(attrName)) {\n            // t-text\n            const dir = attrName.substring(2)\n            // 执行指令\n            this[dir] && this[dir](node, this.$vm, exp)\n          }\n          if (this.isEvent(attrName)) {\n            const dir = attrName.substring(1) // @click\n            this.eventHandler(node, this.$vm, exp, dir)\n          }\n        })\n      } else if (this.isInterpolation(node)) {\n        // 文本\n        // console.log('编译文本'+node.textContent);\n        this.compileText(node)\n      }\n\n      // 递归子节点\n      if (node.childNodes && node.childNodes.length > 0) {\n        this.compile(node)\n      }\n    })\n  }\n\n  compileText(node) {\n    // console.log(RegExp.$1);\n    this.update(node, this.$vm, RegExp.$1, 'text')\n  }\n\n  // 更新函数\n  update(node, vm, exp, dir) {\n    const updaterFn = this[dir + 'Updater']\n    // 初始化\n    updaterFn && updaterFn(node, vm[exp])\n    // 依赖收集\n    new Watcher(vm, exp, function (value) {\n      updaterFn && updaterFn(node, value)\n    })\n  }\n\n  text(node, vm, exp) {\n    this.update(node, vm, exp, 'text')\n  }\n\n  //   双绑\n  model(node, vm, exp) {\n    // 指定input的value属性\n    this.update(node, vm, exp, 'model')\n\n    // 视图对模型响应\n    node.addEventListener('input', (e) => {\n      vm[exp] = e.target.value\n    })\n  }\n\n  modelUpdater(node, value) {\n    node.value = value\n  }\n\n  html(node, vm, exp) {\n    this.update(node, vm, exp, 'html')\n  }\n\n  htmlUpdater(node, value) {\n    node.innerHTML = value\n  }\n\n  textUpdater(node, value) {\n    node.textContent = value\n  }\n\n  //   事件处理器\n  eventHandler(node, vm, exp, dir) {\n    //   @click=\"onClick\"\n    let fn = vm.$options.methods && vm.$options.methods[exp]\n    if (dir && fn) {\n      node.addEventListener(dir, fn.bind(vm))\n    }\n  }\n\n  isDirective(attr) {\n    return attr.indexOf('t-') == 0\n  }\n  isEvent(attr) {\n    return attr.indexOf('@') == 0\n  }\n  isElement(node) {\n    return node.nodeType === 1\n  }\n  // 插值文本\n  isInterpolation(node) {\n    return node.nodeType === 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent)\n  }\n}\n","/*\n * @Author: xiatairui_i\n * @Date: 2020-04-10 09:38:48\n * @LastEditors: xiatairui_i\n * @LastEditTime: 2020-04-10 10:00:40\n * @Description: File Content\n */\nimport Observer from './observer'\nimport Compile from './compile'\n\nclass Tview {\n  constructor(options) {\n    this.$options = options\n\n    // 数据响应化\n    this.$data = options.data\n    new Observer(this.$data, this)\n\n    new Compile(options.el, this)\n\n    // created执行\n    if (options.created) {\n      options.created.call(this)\n    }\n  }\n}\nexport default Tview\n"],"names":["Dep","subs","sub","push","arr","item","length","index","indexOf","splice","remove","this","window","target","addSub","slice","i","l","update","def","obj","key","val","enumerable","Object","defineProperty","value","writable","configurable","hasOwnProperty","prototype","arrayProto","Array","arrayMethods","create","forEach","method","original","arguments","args","inserted","result","apply","ob","__ob__","observeArray","dep","notify","hasProto","arrayKeys","getOwnPropertyNames","Observer","vm","isArray","protoAugment","copyAugment","walk","keys","defineReactive","proxyData","items","observe","get","$data","set","newVal","_typeof","childOb","depend","src","__proto__","console","log","call","Watcher","expOrFn","cb","getter","path","bailRE","test","segments","split","parsePath","undefined","oldValue","doc","document","Compile","el","$el","querySelector","$vm","$fragment","node2Fragment","compile","appendChild","child","frag","createDocumentFragment","firstChild","childNodes","from","node","_this","isElement","nodeAttrs","attributes","attr","attrName","name","exp","isDirective","dir","substring","isEvent","eventHandler","isInterpolation","compileText","RegExp","$1","updaterFn","addEventListener","e","innerHTML","textContent","fn","$options","methods","bind","nodeType","options","data","created"],"mappings":"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"}